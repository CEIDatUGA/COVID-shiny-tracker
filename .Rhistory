shiny::selectInput("yscale", "Y-scale",c("linear" = "linear", "logarithmic" = "logarithmic")),
br(), br()
),
# Output:
mainPanel(
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "case_death_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_frac_plot", height = "300px")
)
)
)
# Define server function
server <- function(input, output) {
#Reactive function to prepare plot data
get_plot_data <- reactive({
#choose either cases or deaths to plot
if (input$case_death == 'case' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = positive) %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1)) #add 1 to prevent divide by 0
}
if (input$case_death == 'death' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = death)  %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1))
}
if (input$case_death == 'case' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_positive) %>%
mutate(test_outcome = all_total)%>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
if (input$case_death == 'death' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_death) %>%
mutate(test_outcome = all_total) %>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
#adjust data to align for plotting by cases on x-axis.
#Takes the plot_dat object created above to then designate further functionality
if (input$xscale == 'x_count')
{
#Takes plot_dat and filters All_counts by the predetermined count limit from the reactive above
#Created the tme variable (which represents the day number of the outbreak) from the date variable
#Groups data by state/province
#Will plot the number of days since the selected count_limit or the date
plot_dat <- plot_dat %>% mutate(count_limit = input$count_limit) %>%
filter(all_positive >= count_limit) %>%
mutate(Time = as.numeric(date)) %>%
group_by(state) %>%
mutate(Time = Time - min(Time))
}
else
{
plot_dat <- plot_dat %>% mutate(Time = date)
}
}) #end reactive function that produces the right plot_dat data needed
#make the plot for cases/deaths
output$case_death_plot <- renderPlotly({
scaleparam <- "fixed"
p1 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p1 <- p1 + scale_y_log10()
}
ggplotly(p1)
}) #end function making case/deaths plot
#make the testing plots
output$testing_plot <- renderPlotly({
scaleparam <- "fixed"
p2 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p2 <- p2 + scale_y_log10()
}
ggplotly(p2)
}) #end function making testing plot
#make the fraction positive testing plots
output$testing_frac_plot <- renderPlotly({
scaleparam <- "fixed"
p3 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_frac_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_frac_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
ggplotly(p3)
}) #end function making testing plot
} #end server function
# Create Shiny object
shinyApp(ui = ui, server = server)
us_data <- read_csv("http://covidtracking.com/api/states/daily.csv")
us_clean <- us_data %>% dplyr::select(c(date,state,positive,negative,total,hospitalized,death)) %>%
mutate(date = as.Date(as.character(date),format="%Y%m%d")) %>%
group_by(state) %>% arrange(date) %>%
mutate(all_positive = cumsum(positive)) %>%
mutate(all_negative = cumsum(negative)) %>%
mutate(all_total = cumsum(total)) %>%
mutate(all_hospitalized = cumsum(hospitalized)) %>%
mutate(all_death = cumsum(death))
saveRDS(us_clean,'cleandata.RDS')
state_var = unique(us_clean$state)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("COVID-19"),
sidebarLayout(
sidebarPanel(
withMathJax(),
#State selector coding with Cali Wash and GA as awlays selected for a defult setting, will flash an error with none selected
#Picker input = drop down bar
shinyWidgets::pickerInput("state_selector", "Select States", state_var, multiple = TRUE,
options = list(`actions-box` = TRUE),
selected = c("CA","WA", "GA")),
#Shiny selectors below major picker input
shiny::selectInput("case_death", "Outcome",c("Cases" = "case", "Deaths" = "death")),
shiny::selectInput("daily_tot", "Daily or Total",c("Daily" = "daily", "Total" = "tot")),
shiny::selectInput("absolute_scaled", "Absolute or scaled values",c("Absolute number" = "actual", "Per 100K" = "scaled")),
shiny::selectInput("xscale", "Use time or days since a certain number of reported total cases/deaths  on x-axis",c("Time" = "x_time", "Cases" = "x_count")),
sliderInput(inputId = "count_limit", "Choose the number of cases/deaths in a state to start graphs", min = 1, max = 500, value = 100),
shiny::selectInput("yscale", "Y-scale",c("linear" = "linear", "logarithmic" = "logarithmic")),
br(), br()
),
# Output:
mainPanel(
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "case_death_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_frac_plot", height = "300px")
)
)
)
# Define server function
server <- function(input, output) {
#Reactive function to prepare plot data
get_plot_data <- reactive({
#choose either cases or deaths to plot
if (input$case_death == 'case' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = positive) %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1)) #add 1 to prevent divide by 0
}
if (input$case_death == 'death' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = death)  %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1))
}
if (input$case_death == 'case' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_positive) %>%
mutate(test_outcome = all_total)%>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
if (input$case_death == 'death' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_death) %>%
mutate(test_outcome = all_total) %>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
#adjust data to align for plotting by cases on x-axis.
#Takes the plot_dat object created above to then designate further functionality
if (input$xscale == 'x_count')
{
#Takes plot_dat and filters All_counts by the predetermined count limit from the reactive above
#Created the tme variable (which represents the day number of the outbreak) from the date variable
#Groups data by state/province
#Will plot the number of days since the selected count_limit or the date
plot_dat <- plot_dat %>% mutate(count_limit = input$count_limit) %>%
filter(all_positive >= count_limit) %>%
mutate(Time = as.numeric(date)) %>%
group_by(state) %>%
mutate(Time = Time - min(Time))
}
else
{
plot_dat <- plot_dat %>% mutate(Time = date)
}
}) #end reactive function that produces the right plot_dat data needed
#make the plot for cases/deaths
output$case_death_plot <- renderPlotly({
scaleparam <- "fixed"
p1 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p1 <- p1 + scale_y_log10()
}
ggplotly(p1)
}) #end function making case/deaths plot
#make the testing plots
output$testing_plot <- renderPlotly({
scaleparam <- "fixed"
p2 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p2 <- p2 + scale_y_log10()
}
ggplotly(p2)
}) #end function making testing plot
#make the fraction positive testing plots
output$testing_frac_plot <- renderPlotly({
scaleparam <- "fixed"
p3 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_frac_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_frac_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
ggplotly(p3)
}) #end function making testing plot
} #end server function
# Create Shiny object
shinyApp(ui = ui, server = server)
us_data <- read_csv("http://covidtracking.com/api/states/daily.csv")
us_clean <- us_data %>% dplyr::select(c(date,state,positive,negative,total,hospitalized,death)) %>%
mutate(date = as.Date(as.character(date),format="%Y%m%d")) %>%
group_by(state) %>% arrange(date) %>%
mutate(all_positive = cumsum(positive)) %>%
mutate(all_negative = cumsum(negative)) %>%
mutate(all_total = cumsum(total)) %>%
mutate(all_hospitalized = cumsum(hospitalized)) %>%
mutate(all_death = cumsum(death))
saveRDS(us_clean,'cleandata.RDS')
us_popsize <- readRDS("./us_popsize.RDS")
us_data <- read_csv("http://covidtracking.com/api/states/daily.csv")
us_clean <- us_data %>% dplyr::select(c(date,state,positive,negative,total,hospitalized,death)) %>%
mutate(date = as.Date(as.character(date),format="%Y%m%d")) %>%
group_by(state) %>% arrange(date) %>%
mutate(all_positive = cumsum(positive)) %>%
mutate(all_negative = cumsum(negative)) %>%
mutate(all_total = cumsum(total)) %>%
mutate(all_hospitalized = cumsum(hospitalized)) %>%
mutate(all_death = cumsum(death))
saveRDS(us_clean,'cleandata.RDS')
us_popsize <- readRDS("./us_popsize.RDS") %>% merge(us_popsize, us_clean)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("COVID-19"),
sidebarLayout(
sidebarPanel(
withMathJax(),
#State selector coding with Cali Wash and GA as awlays selected for a defult setting, will flash an error with none selected
#Picker input = drop down bar
shinyWidgets::pickerInput("state_selector", "Select States", state_var, multiple = TRUE,
options = list(`actions-box` = TRUE),
selected = c("CA","WA", "GA")),
#Shiny selectors below major picker input
shiny::selectInput("case_death", "Outcome",c("Cases" = "case", "Deaths" = "death")),
shiny::selectInput("daily_tot", "Daily or Total",c("Daily" = "daily", "Total" = "tot")),
shiny::selectInput("absolute_scaled", "Absolute or scaled values",c("Absolute number" = "actual", "Per 100K" = "scaled")),
shiny::selectInput("xscale", "Use time or days since a certain number of reported total cases/deaths  on x-axis",c("Time" = "x_time", "Cases" = "x_count")),
sliderInput(inputId = "count_limit", "Choose the number of cases/deaths in a state to start graphs", min = 1, max = 500, value = 100),
shiny::selectInput("yscale", "Y-scale",c("linear" = "linear", "logarithmic" = "logarithmic")),
br(), br()
),
# Output:
mainPanel(
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "case_death_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_frac_plot", height = "300px")
)
)
)
us_data <- read_csv("http://covidtracking.com/api/states/daily.csv")
us_clean <- us_data %>% dplyr::select(c(date,state,positive,negative,total,hospitalized,death)) %>%
mutate(date = as.Date(as.character(date),format="%Y%m%d")) %>%
group_by(state) %>% arrange(date) %>%
mutate(all_positive = cumsum(positive)) %>%
mutate(all_negative = cumsum(negative)) %>%
mutate(all_total = cumsum(total)) %>%
mutate(all_hospitalized = cumsum(hospitalized)) %>%
mutate(all_death = cumsum(death))
saveRDS(us_clean,'cleandata.RDS')
us_popsize <- readRDS("./us_popsize.RDS")
us_clean <- merge(us_popsize, us_clean)
View(us_clean)
state_var = unique(us_clean$state)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("COVID-19"),
sidebarLayout(
sidebarPanel(
withMathJax(),
#State selector coding with Cali Wash and GA as awlays selected for a defult setting, will flash an error with none selected
#Picker input = drop down bar
shinyWidgets::pickerInput("state_selector", "Select States", state_var, multiple = TRUE,
options = list(`actions-box` = TRUE),
selected = c("CA","WA", "GA")),
#Shiny selectors below major picker input
shiny::selectInput("case_death", "Outcome",c("Cases" = "case", "Deaths" = "death")),
shiny::selectInput("daily_tot", "Daily or Total",c("Daily" = "daily", "Total" = "tot")),
shiny::selectInput("absolute_scaled", "Absolute or scaled values",c("Absolute number" = "actual", "Per 100K" = "scaled")),
shiny::selectInput("xscale", "Use time or days since a certain number of reported total cases/deaths  on x-axis",c("Time" = "x_time", "Cases" = "x_count")),
sliderInput(inputId = "count_limit", "Choose the number of cases/deaths in a state to start graphs", min = 1, max = 500, value = 100),
shiny::selectInput("yscale", "Y-scale",c("linear" = "linear", "logarithmic" = "logarithmic")),
br(), br()
),
# Output:
mainPanel(
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "case_death_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_plot", height = "300px"),
#change to plotOutput if using static ggplot object
plotlyOutput(outputId = "testing_frac_plot", height = "300px")
)
)
)
# Define server function
server <- function(input, output) {
#Reactive function to prepare plot data
get_plot_data <- reactive({
#choose either cases or deaths to plot
if (input$case_death == 'case' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = positive) %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1)) #add 1 to prevent divide by 0
}
if (input$case_death == 'death' && input$daily_tot == 'daily' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = death)  %>%
mutate(test_outcome = total) %>%
mutate(test_frac_outcome = positive/(total+1))
}
if (input$case_death == 'case' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_positive) %>%
mutate(test_outcome = all_total)%>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
if (input$case_death == 'death' && input$daily_tot == 'tot' && input$absolute_scaled == 'actual')
{
plot_dat <- us_clean %>% mutate(outcome = all_death) %>%
mutate(test_outcome = all_total) %>%
mutate(test_frac_outcome = all_positive/(all_total+1))
}
#adjust data to align for plotting by cases on x-axis.
#Takes the plot_dat object created above to then designate further functionality
if (input$xscale == 'x_count')
{
#Takes plot_dat and filters All_counts by the predetermined count limit from the reactive above
#Created the tme variable (which represents the day number of the outbreak) from the date variable
#Groups data by state/province
#Will plot the number of days since the selected count_limit or the date
plot_dat <- plot_dat %>% mutate(count_limit = input$count_limit) %>%
filter(all_positive >= count_limit) %>%
mutate(Time = as.numeric(date)) %>%
group_by(state) %>%
mutate(Time = Time - min(Time))
}
else
{
plot_dat <- plot_dat %>% mutate(Time = date)
}
}) #end reactive function that produces the right plot_dat data needed
#make the plot for cases/deaths
output$case_death_plot <- renderPlotly({
scaleparam <- "fixed"
p1 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p1 <- p1 + scale_y_log10()
}
ggplotly(p1)
}) #end function making case/deaths plot
#make the testing plots
output$testing_plot <- renderPlotly({
scaleparam <- "fixed"
p2 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
#Flip to logscale if selected
if(input$yscale == "logarithmic") {
p2 <- p2 + scale_y_log10()
}
ggplotly(p2)
}) #end function making testing plot
#make the fraction positive testing plots
output$testing_frac_plot <- renderPlotly({
scaleparam <- "fixed"
p3 <- get_plot_data() %>%
#Filter data for cases >0 and selected states
filter(test_frac_outcome > 0) %>%
filter(state %in% input$state_selector) %>%
#Begin plot
ggplot(aes(x=Time, y = test_frac_outcome, color = state))+
geom_line()+
geom_point()+
theme_light()
ggplotly(p3)
}) #end function making testing plot
} #end server function
# Create Shiny object
shinyApp(ui = ui, server = server)
runApp('app_update_4_1_ah.R')
runApp('app_update_4_1_ah_wn.R')
runApp('app_update_4_1_ah_wn.R')
us_popsize <- readRDS("C:/Users/17033/Desktop/shiny_covid/COVID-shiny-tracker/us_popsize.RDS")
View(us_popsize)
runApp('app_update_4_1_ah_wn.R')
if (file.exists('cleandata.RDS') && as.Date(file.mtime('cleandata.RDS')) ==  Sys.Date()) {
#################################
# load already clean data locally
#################################
us_clean <- readRDS('cleandata.RDS')
} else
{
#################################
# pull data from Covidtracking and process
#################################
us_data <- read_csv("http://covidtracking.com/api/states/daily.csv")
us_clean <- us_data %>% dplyr::select(c(date,state,positive,negative,total,hospitalized,death)) %>%
mutate(date = as.Date(as.character(date),format="%Y%m%d")) %>%
group_by(state) %>% arrange(date) %>%
mutate(all_positive = cumsum(positive)) %>%
mutate(all_negative = cumsum(negative)) %>%
mutate(all_total = cumsum(total)) %>%
mutate(all_hospitalized = cumsum(hospitalized)) %>%
mutate(all_death = cumsum(death))
saveRDS(us_clean,'cleandata.RDS')
}
View(us_clean)
runApp('app_update_4_1_ah_wn.R')
runApp('app_update_4_1_ah_wn.R')
runApp('app_update_4_1_ah_wn.R')
runApp('app_update_4_1_ah_wn.R')
plot_dat <- us_clean %>% mutate(outcome = (positive / total_pop) * 100000) %>%
mutate(test_outcome = (total / total_pop) * 100000) %>%
mutate(test_frac_outcome = positive/(total+1))
us_popsize <- readRDS("./us_popsize.RDS")
us_clean <- merge(us_popsize, us_clean)
plot_dat <- us_clean %>% mutate(outcome = (positive / total_pop) * 100000) %>%
mutate(test_outcome = (total / total_pop) * 100000) %>%
mutate(test_frac_outcome = positive/(total+1))
View(plot_dat)
plot_dat <- us_clean %>% mutate(outcome = (positive / total_pop) * 100000) %>%
mutate(test_outcome = (total / total_pop) * 100000) %>%
mutate(test_frac_outcome = ((positive/(total+1) / total_pop) * 100000 )
plot_dat <- us_clean %>% mutate(outcome = (positive / total_pop) * 100000) %>%
mutate(test_outcome = (total / total_pop) * 100000) %>%
mutate(test_frac_outcome = ((positive/(total+1) / total_pop) * 100000) )
View(plot_dat)
View(plot_dat)
plot_dat <- us_clean %>% mutate(outcome = (positive / total_pop) * 100000) %>%
mutate(test_outcome = (total / total_pop) * 100000) %>%
mutate(test_frac_outcome = ((positive/(total+1)) / total_pop) * 100000)
View(plot_dat)
runApp('app_update_4_1_ah_wn.R')
runApp('app_update_4_1_ah_wn.R')
